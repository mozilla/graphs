# QUICKSTART

open graphs/graph.html # in your favorite browser; on Mac "open" will do the right thing

You can now hack on graph.html, js/common.js and js/graph-2.js (maybe js/embed.js and js/dashboard.js, if you’re working on the embed or dashboard components). You’ll be pulling live data from graphs-new.mozilla.org by default.

Note that the dashboard (index.html) will be blank - these images are generated by running node.js from cron, doing server-side HTML5 canvas and saving the result to a static image (PNG).

You need to install node.js and npm, then:

npm install canvas htmlparser jquery jsdom
mkdir images/dashboard
node ./scripts/static_graphs.js

You should now have static graph images in ./images/dashboard/ and index.html should look healthier.

# DEV VM INSTALL (Vagrant)

See vagrant/README for instructions on installing a dev VM

# FULL SERVER INSTALL

# Tested on RHEL 6
# Also see https://wiki.mozilla.org/Perfomatic/Installation for 1.0 version

sudo yum install httpd mod_wsgi git MySQL-python varnish mysql-server cairo python-setuptools wget 

# install python dependencies (packaged RPM is too old)
sudo easy_install webob

# for building node.js and deps:
sudo yum install gcc-c++ cairo-devel openssl-devel make

# add graphs user
sudo /usr/sbin/useradd graphs
sudo mkdir /var/www/html/graphs
sudo chown graphs:graphs /var/www/html/graphs
sudo su - graphs
cd /var/www/html
git clone https://github.com/rhelmer/graphs.git graphs/
cd graphs
cp dist.htaccess .htaccess
# configure server/api.wsgi, add db username/password/hostname
# FIXME refactor below to all use one setting
# change "graphs-new.mozilla.org" to proper graphserver in:
#  scripts/static_graphs.js
#  js/common.js
#  tests/selenium.html
exit

# set up Apache vhost
sudo mkdir /var/log/httpd/graphs.example.com

cat /etc/httpd/conf.d/graphs.example.com.conf
"""
<VirtualHost *:8080>
    ServerName graphs.example.com
    ServerAdmin me@example.com
    DocumentRoot /var/www/html/graphs
    <Directory "/var/www/html/graphs">
        AllowOverride All
        Options ExecCGI FollowSymLinks
        AddHandler cgi-script .cgi
        AddHandler wsgi-script .wsgi
    </Directory>
    # Only allow certain hosts to send test data
    <FilesMatch ^(collect|bulk).cgi$>
        deny from all
        allow from x.y.z.a
    </FilesMatch>
    WSGIScriptAlias /server/api /var/www/html/graphs/server/api.wsgi
    WSGIScriptAlias /server/dumpdata /var/www/html/graphs/server/dumpdata.wsgi

    ErrorLog /var/log/httpd/graphs.example.com/error.log
    CustomLog /var/log/httpd/graphs.example.com/access.log common

</VirtualHost>
"""

# edit httpd.conf and varnish configs, put apache on port 8080 and varnish on 80
# TODO expand on this

sudo /etc/init.d/httpd restart
sudo /etc/init.d/varnish restart

sudo /sbin/chkconfig httpd on

# open firewall
# add to /etc/sysconfig/iptables
-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT
# Might want this for testing Apache directly
#-A INPUT -m state --state NEW -m tcp -p tcp --dport 8080 -j ACCEPT
sudo /sbin/service iptables restart

# manual install of node.js (as graphs user)
# FIXME get this packaged up as RPM
cd ~/
wget 'http://nodejs.org/dist/node-v0.4.7.tar.gz'
tar zxf node-v0.4.7.tar.gz 
cd node-v0.4.7
./configure --prefix=$HOME/node
make install

echo "export PATH=$PATH:$HOME/node/bin" >> ~/.bash_profile
. ~/.bash_profile

# install node package manager npm http://npmjs.org/
curl http://npmjs.org/install.sh | sh
npm install canvas htmlparser jquery jsdom

# generate server-side graphs
cat /etc/cron.d/graphs
"""
*/5 * * * * graphs /var/www/html/graphs/scripts/static_graphs.sh
# keep cache warm
# FIXME  server-side graphs should replace this soon
*/1 * * * * graphs /var/www/html/graphs/scripts/cache.sh graphs-new.mozilla.org
"""

# MySQL DB setup
sudo /sbin/service mysqld restart
sudo /sbin/chkconfig mysqld on
echo "create database graphs_v2; grant all privileges on graphs_v2.* to 'graphs'@'localhost' identified by 'secret_passsword';" | mysql -u root
cd /var/www/html/graphs/
mysql -u root graphs_v2 < sql/schema.sql

# insert test data
mysql -u graphs -p graphs_v2 < sql/test_data.sql 
# TODO show example POST using curl
# based on https://wiki.mozilla.org/Buildbot/Talos/DataFormat
